[{"title":"NodeUtil","type":0,"sectionRef":"#","url":"api/NodeUtil","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#types","content":" "},{"title":"Node​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#Node","content":"&lt;/&gt; type Node = Model  A model that can be run through the NodeUtil functions "},{"title":"Properties​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#properties","content":" "},{"title":"BackendTagPrefix​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#BackendTagPrefix","content":"&lt;/&gt; NodeUtil.BackendTagPrefix: string to avoid overlapping with front-end tags, all tags are appended on the backend with a tag prefix "},{"title":"Functions​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#functions","content":" "},{"title":"isConnected​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#isConnected","content":"&lt;/&gt; NodeUtil.isConnected( node: Node, other: Node ) → boolean Checks if two nodes share a connection  "},{"title":"disconnect​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#disconnect","content":"&lt;/&gt; NodeUtil.disconnect( node: Node, other: Node ) → nil Removes the connection from both nodes  "},{"title":"setConnectionTag​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#setConnectionTag","content":"&lt;/&gt; NodeUtil.setConnectionTag( node: Node, other: Node, tag: string ) → () Sets the tag of a connection  "},{"title":"getConnectionTags​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#getConnectionTags","content":"&lt;/&gt; NodeUtil.getConnectionTags( node: Node, other: Node ) → {[number]: string} Gets the tags of a connection  "},{"title":"getIfConnectionHasTag​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#getIfConnectionHasTag","content":"&lt;/&gt; NodeUtil.getIfConnectionHasTag( node: Node, other: Node, tag: string ) → boolean Gets if a connection has a tag  "},{"title":"removeConnectionTag​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#removeConnectionTag","content":"&lt;/&gt; NodeUtil.removeConnectionTag( node: Node, other: Node, tag: string ) → nil Gets if a connection has a tag  "},{"title":"connect​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#connect","content":"&lt;/&gt; NodeUtil.connect( node: Node, other: Node, tagOrTagList: ({[number]: string} | string)?, position: Vector3? ) → nil Creates a connection between two nodes.  "},{"title":"setConnectionPosition​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#setConnectionPosition","content":"&lt;/&gt; NodeUtil.setConnectionPosition( node: Node, other: Node, position: Vector3? ) → nil Sets the position of a connection between two nodes. Will error if no connection exists. Can be used to erase position if nil is passed as position parameter.  "},{"title":"getConnectionPosition​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#getConnectionPosition","content":"&lt;/&gt; NodeUtil.getConnectionPosition( node: Node, other: Node ) → Vector3?  Gets the position of a connection between two nodes. Will error if no connection exists. Will return nil if position was never set.  "},{"title":"getConnectedNodes​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#getConnectedNodes","content":"&lt;/&gt; NodeUtil.getConnectedNodes(node: Node) → {[number]: Node} Returns a list of all nodes that are connected  "},{"title":"getConnectedNodesOfTag​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#getConnectedNodesOfTag","content":"&lt;/&gt; NodeUtil.getConnectedNodesOfTag( node: Node, tag: string ) → {[number]: Node} Returns a list of all nodes that match the tag  "},{"title":"setInputValue​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#setInputValue","content":"&lt;/&gt; NodeUtil.setInputValue( node: Node, key: string, val: any? ) → nil Set non-solved properties properties manually  "},{"title":"setOutputSolver​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#setOutputSolver","content":"&lt;/&gt; NodeUtil.setOutputSolver( node: Node, key: string, solver: ModuleScript ) → nil Get the value of non-solver properties Set a module to be used for future solving of the value  "},{"title":"setNodePosition​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#setNodePosition","content":"&lt;/&gt; NodeUtil.setNodePosition( node: Node, position: Vector3 ) → nil Sets the position of a node  "},{"title":"getNodePosition​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#getNodePosition","content":"&lt;/&gt; NodeUtil.getNodePosition(node: Node) → Vector3  Gets the position of a node  "},{"title":"new​","type":1,"pageTitle":"NodeUtil","url":"api/NodeUtil#new","content":"&lt;/&gt; NodeUtil.new(position: Vector3 ) → Node Constructs a new node at the specified position. "}]